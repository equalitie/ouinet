# TODO: Create a new Dockerfile for the dev Linux image
linux / prepare-builder-image:
  stage: prepare
  tags:
    - shell
  variables:
    CI_REGISTRY_IMAGE_TAG: "linux-builder"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --pull --target base -t $CI_REGISTRY_IMAGE:$CI_REGISTRY_IMAGE_TAG - < Dockerfile
    - docker push $CI_REGISTRY_IMAGE:$CI_REGISTRY_IMAGE_TAG

linux / build:
  stage: build
  tags:
    - docker
  needs: ['linux / prepare-builder-image']
  artifacts:
    paths:
      - build/client
      - build/injector
      - build/lib*.so
      - build/lib*.so.*
      - build/test/test-*
    expire_in: 6h
  cache:
    key: single
    paths:
      - build/modules/*/go-workspace
      - build/src/ouiservice/lampshade/go-workspace
  script:
    - mkdir -p build
    - cd build
    - cmake ..
    - make -j `nproc`

linux / unit-test:
  stage: test
  tags:
    - docker
    - ptrace
  needs: ['linux / build']
  script:
    - export LD_LIBRARY_PATH=$PWD/build:/usr/local/lib
    - for test in ./build/test/test-*; do "$test" --log_level=test_suite; done

linux / integration-test:
  stage: test
  tags:
    - docker
  needs: ['linux / build']
  script:
    - export LD_LIBRARY_PATH=$PWD/build:/usr/local/lib
    - export OUINET_BUILD_DIR=$PWD/build
    - ./scripts/run_integration_tests.sh

linux / build-prod-image:
  stage: release
  tags:
    - shell
  needs: ['linux / unit-test', 'linux / integration-test']
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --pull --target base -t $CI_REGISTRY_IMAGE:latest - < Dockerfile
    - docker push $CI_REGISTRY_IMAGE:latest

