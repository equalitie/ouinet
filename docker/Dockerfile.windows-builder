#
# Optionally enable SSH access to the container
#
ARG with_sshd=no
#
# Optionally enable SSH access without password and with using ssh identity file
#
ARG with_ssh_authorized_key
#
# Example usage
#
#   docker build \
#          -t ouinet.windows \
#          --build-arg with_sshd=yes \
#          --build-arg with_ssh_authorized_key="$(cat ~/.ssh/id_ed25519.pub)" \
#          - < docker/Dockerfile.windows-builder
#
#   docker run -it --rm -p 2022:22 ouinet.windows
#
#   ssh localhost -p 2022
#

#
# Make sure to "Switch to Windows containers" on the Windows machine as described at
# https://learn.microsoft.com/en-us/virtualization/windowscontainers/quick-start/run-your-first-container#pull-a-container-base-image
#

# Select as base image matching your host to get process isolation
FROM mcr.microsoft.com/windows/servercore:ltsc2022 AS base
    SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

    # Install msys2
    RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
      Invoke-WebRequest -UseBasicParsing -uri "https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe" -OutFile msys2.exe; \
      .\msys2.exe -y -oC:\; \
      Remove-Item msys2.exe ;

    # Install toolchain dependencies
    RUN \
      function Invoke-Msys() { C:\msys64\usr\bin\bash.exe @('-lc') + @Args; } \
      Invoke-Msys ' '; \
      Invoke-Msys 'pacman --noconfirm -Syuu'; \
      Invoke-Msys 'pacman --noconfirm -Syuu'; \
      Invoke-Msys 'pacman --noconfirm -Scc'; \
      Invoke-Msys 'pacman --noconfirm -S mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja mingw-w64-x86_64-gcc git make patch mingw-w64-x86_64-rust';

    # Add msys2 binaries to the windows path
    RUN \
      $path = $env:path + \
        ';C:\msys64\usr\bin' + \
        ';C:\msys64\mingw64\bin'; \
      Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment\' -Name Path -Value $path;

#
# Optionally set up SSH (see the `with_sshd` ARG above). Running Windows in a
# container requires Hyper-V and when that is enabled it is impossible to to
# copy files into the container (using `docker cp`) while it's running. But we
# can do it over SSH.
#
# The following instruction are taken from
#   https://github.com/JamesParrott/Windows__ssh_server_with_powershell/blob/main/Dockerfile
#
# Which was inpired by
#   https://gist.github.com/MartinSGill/0d29fbddfae9f742abfd04ce83dd7f67
#
FROM base as with-sshd-yes
    ARG with_ssh_authorized_key

    # The command below this one doesn't run in powershell, so switching to cmd.
    SHELL ["cmd.exe", "/C"]

    # Add local user "ssh" with password "Passw0rd" (password access is removed
    # below if `with_ssh_authorized_key` argument is provided)
    RUN net USER ssh "Passw0rd" /ADD && net localgroup "Administrators" "ssh" /ADD

    # Switch back to using powershell.
    SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

    # Install the OpenSSH server
    RUN New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force

    # Setup login using ssh ID if the `with_ssh_authorized_key` argument was
    # provided.
    RUN if ( $env:with_ssh_authorized_key ) { \
        Add-Content -Force -Path C:\ProgramData\ssh\administrators_authorized_keys -Value "$env:with_ssh_authorized_key"; \
        icacls.exe ""C:\ProgramData\ssh\administrators_authorized_keys"" /inheritance:r /grant ""Administrators:F"" /grant ""SYSTEM:F""; \
    }

    # Start the sshd service and make it autostart, this will also create files
    # in the ssh/ directory which we'll need for the next step
    RUN Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0; \
        Start-Service sshd; \
        Set-Service -Name sshd -StartupType 'Automatic'

    # Disallow connections using login:password credentials. Note that this is
    # done here because the above `Start-Service sshd` command has created the
    # `sshd_config` which we now need to modify.
    RUN if ( $env:with_ssh_authorized_key ) { \
        (Get-Content c:\ProgramData\ssh\sshd_config).Replace('#PasswordAuthentication yes', 'PasswordAuthentication no') \
        |Set-Content c:\ProgramData\ssh\sshd_config; \
        Restart-Service sshd \
    }

    # Expose port 22 for SSH
    EXPOSE 22

FROM base as with-sshd-no

FROM with-sshd-${with_sshd} as final
